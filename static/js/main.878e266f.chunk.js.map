{"version":3,"sources":["index.js"],"names":["Box","selectBox","props","row","col","className","this","boxClass","id","onClick","React","Component","Grid","width","cols","rowsArr","i","rows","j","boxID","gridFull","push","key","style","Buttons","handleSelect","evt","gridSize","variant","playButton","pauseButton","clear","slow","fast","seed","class","title","onSelect","eventKey","Container","gridCopy","arrayClone","state","setState","Math","floor","random","clearInterval","intervalId","setInterval","play","speed","grid","Array","fill","map","generation","size","g","g2","count","arr","JSON","parse","stringify","ReactDOM","render","document","getElementById"],"mappings":"uPAMMA,E,4MAEJC,UAAY,WACV,EAAKC,MAAMD,UAAU,EAAKC,MAAMC,IAAK,EAAKD,MAAME,M,uDAIhD,OACE,yBAAKC,UAAWC,KAAKJ,MAAMK,SAAUC,GAAIF,KAAKJ,MAAMM,GAAIC,QAASH,KAAKL,gB,GAR1DS,IAAMC,WAclBC,E,uKAMF,IAHA,IAAMC,EAA2B,GAAlBP,KAAKJ,MAAMY,KAAa,EACnCC,EAAU,GACVR,EAAW,GACNS,EAAI,EAAGA,EAAIV,KAAKJ,MAAMe,KAAMD,IACnC,IAAK,IAAIE,EAAI,EAAGA,EAAIZ,KAAKJ,MAAMY,KAAMI,IAAK,CACxC,IAAIC,EAAQH,EAAI,IAAME,EAEtBX,EAAWD,KAAKJ,MAAMkB,SAASJ,GAAGE,GAAK,SAAW,UAClDH,EAAQM,KACN,kBAACrB,EAAD,CACEO,SAAUA,EACVe,IAAKH,EACLhB,IAAKa,EACLZ,IAAKc,EACLjB,UAAWK,KAAKJ,MAAMD,aAM9B,OACE,yBAAKI,UAAU,OAAOkB,MAAO,CAACV,MAAOA,IAClCE,O,GAzBUL,IAAMC,WAgCnBa,E,4MAELC,aAAe,SAACC,GACf,EAAKxB,MAAMyB,SAASD,I,uDAIpB,OACC,yBAAKrB,UAAU,UACd,kBAAC,IAAD,KACC,4BAAQA,UAAU,SAASuB,QAAQ,QAAQnB,QAASH,KAAKJ,MAAM2B,YAA/D,QAGA,4BAAQxB,UAAU,SAASuB,QAAQ,QAAQnB,QAASH,KAAKJ,MAAM4B,aAA/D,SAGA,4BAAQzB,UAAU,SAASuB,QAAQ,QAAQnB,QAASH,KAAKJ,MAAM6B,OAA/D,SAGA,4BAAQ1B,UAAU,SAASuB,QAAQ,QAAQnB,QAASH,KAAKJ,MAAM8B,MAA/D,QAGA,4BAAQ3B,UAAU,SAASuB,QAAQ,QAAQnB,QAASH,KAAKJ,MAAM+B,MAA/D,QAGA,4BAAQ5B,UAAU,SAASuB,QAAQ,QAAQnB,QAASH,KAAKJ,MAAMgC,MAA/D,UAGA,kBAAC,IAAD,CACOC,MAAM,SACZC,MAAM,YACN5B,GAAG,YACG6B,SAAU/B,KAAKmB,cAErB,kBAAC,IAAD,CAAca,SAAS,KAAvB,SACM,6BACN,kBAAC,IAAD,CAAcA,SAAS,KAAvB,SACM,6BACN,kBAAC,IAAD,CAAcA,SAAS,KAAvB,gB,GAtCgB5B,IAAMC,WA+CtB4B,E,kDACF,aAAe,IAAD,8BACZ,gBAUFtC,UAAY,SAACE,EAAKC,GAChB,IAAIoC,EAAWC,EAAW,EAAKC,MAAMtB,UACrCoB,EAASrC,GAAKC,IAAQoC,EAASrC,GAAKC,GACpC,EAAKuC,SAAS,CACZvB,SAAUoB,KAfA,EAmBdN,KAAO,WAEL,IADA,IAAIM,EAAWC,EAAW,EAAKC,MAAMtB,UAC5BJ,EAAI,EAAGA,EAAI,EAAKC,KAAMD,IAC7B,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAKJ,KAAMI,IACS,IAAlC0B,KAAKC,MAAsB,EAAhBD,KAAKE,YAClBN,EAASxB,GAAGE,IAAK,GAIvB,EAAKyB,SAAS,CACZvB,SAAUoB,KA7BA,EAiCdX,WAAa,WACXkB,cAAc,EAAKC,YACnB,EAAKA,WAAaC,YAAY,EAAKC,KAAM,EAAKC,QAnClC,EAsCdrB,YAAc,WACZiB,cAAc,EAAKC,aAvCP,EA0CdhB,KAAO,WACL,EAAKmB,MAAQ,IACb,EAAKtB,cA5CO,EA+CdI,KAAO,WACL,EAAKkB,MAAQ,IACb,EAAKtB,cAjDO,EAoDdE,MAAQ,WACN,IAAIqB,EAAOC,MAAM,EAAKpC,MAAMqC,OAAOC,KAAI,kBAAMF,MAAM,EAAKvC,MAAMwC,MAAK,MACnE,EAAKX,SAAS,CACZvB,SAAUgC,EACVI,WAAY,KAxDF,EA4Dd7B,SAAW,SAAC8B,GACV,OAAQA,GACN,IAAK,IACH,EAAK3C,KAAO,GACZ,EAAKG,KAAO,GAEd,MACA,IAAK,IACH,EAAKH,KAAO,GACZ,EAAKG,KAAO,GACd,MACA,QACE,EAAKH,KAAO,GACZ,EAAKG,KAAO,GAEhB,EAAKc,SA3EO,EA8EdmB,KAAO,WAIL,IAHA,IAAIQ,EAAI,EAAKhB,MAAMtB,SACfuC,EAAKlB,EAAW,EAAKC,MAAMtB,UAEtBJ,EAAI,EAAGA,EAAI,EAAKC,KAAMD,IAC7B,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAKJ,KAAMI,IAAK,CAClC,IAAI0C,EAAQ,EACR5C,EAAI,GAAO0C,EAAE1C,EAAI,GAAGE,IAAI0C,IACxB5C,EAAI,GAAKE,EAAI,GAAOwC,EAAE1C,EAAI,GAAGE,EAAI,IAAI0C,IACrC5C,EAAI,GAAKE,EAAI,EAAKJ,KAAO,GAAO4C,EAAE1C,EAAI,GAAGE,EAAI,IAAI0C,IACjD1C,EAAI,EAAKJ,KAAO,GAAO4C,EAAE1C,GAAGE,EAAI,IAAI0C,IACpC1C,EAAI,GAAOwC,EAAE1C,GAAGE,EAAI,IAAI0C,IACxB5C,EAAI,EAAKC,KAAO,GAAOyC,EAAE1C,EAAI,GAAGE,IAAI0C,IACpC5C,EAAI,EAAKC,KAAO,GAAKC,EAAI,GAAOwC,EAAE1C,EAAI,GAAGE,EAAI,IAAI0C,IACjD5C,EAAI,EAAKC,KAAO,GAAKC,EAAI,EAAKJ,KAAO,GAAO4C,EAAE1C,EAAI,GAAGE,EAAI,IAAI0C,IAC7DF,EAAE1C,GAAGE,KAAO0C,EAAQ,GAAKA,EAAQ,KAAID,EAAG3C,GAAGE,IAAK,GAC/CwC,EAAE1C,GAAGE,IAAgB,IAAV0C,IAAaD,EAAG3C,GAAGE,IAAK,GAI5C,EAAKyB,SAAS,CACZvB,SAAUuC,EACVH,WAAY,EAAKd,MAAMc,WAAa,KAlGtC,EAAKL,MAAQ,IACb,EAAKlC,KAAO,GACZ,EAAKH,KAAO,GACZ,EAAK4B,MAAQ,CACXc,WAAY,EACZpC,SAAUiC,MAAM,EAAKpC,MAAMqC,OAAOC,KAAI,kBAAMF,MAAM,EAAKvC,MAAMwC,MAAK,OAPxD,E,gEAyGZhD,KAAK4B,S,+BAIH,OACI,6BACI,4BAAI,uDACJ,kBAACV,EAAD,CACEK,WAAYvB,KAAKuB,WACjBC,YAAaxB,KAAKwB,YAClBE,KAAM1B,KAAK0B,KACXC,KAAM3B,KAAK2B,KACXF,MAAOzB,KAAKyB,MACZG,KAAM5B,KAAK4B,KACXP,SAAUrB,KAAKqB,WAEjB,kBAACf,EAAD,CACEQ,SAAUd,KAAKoC,MAAMtB,SACrBH,KAAMX,KAAKW,KACXH,KAAMR,KAAKQ,KACXb,UAAWK,KAAKL,YAElB,4CAAkBK,KAAKoC,MAAMc,YAC7B,6BACA,yDAA8B,6BAA9B,+DAC8D,6BAD9D,oEAEmE,6BAFnE,uG,GAlIQ9C,IAAMC,WA8I9B,SAAS8B,EAAWoB,GAClB,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,IAGnCI,IAASC,OAAO,kBAAC3B,EAAD,MAAe4B,SAASC,eAAe,U","file":"static/js/main.878e266f.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ButtonToolbar, DropdownItem, DropdownButton } from 'react-bootstrap';\n\n// class for individual box on grid\nclass Box extends React.Component {\n  \n  selectBox = () => {\n    this.props.selectBox(this.props.row, this.props.col)\n  }\n  \n  render() {\n    return (\n      <div className={this.props.boxClass} id={this.props.id} onClick={this.selectBox}/>\n    )\n  }\n}\n\n// class for grid of boxes\nclass Grid extends React.Component {\n  \n  render() {\n    const width = (this.props.cols * 14) + 1;\n    var rowsArr = [];\n    var boxClass = \"\";\n    for (var i = 0; i < this.props.rows; i++) {\n      for (var j = 0; j < this.props.cols; j++) {\n        let boxID = i + \"_\" + j;\n\n        boxClass = this.props.gridFull[i][j] ? \"box on\" : \"box off\";\n        rowsArr.push(\n          <Box\n            boxClass={boxClass}\n            key={boxID}\n            row={i}\n            col={j}\n            selectBox={this.props.selectBox}\n            />\n        );\n      }\n    }\n\n    return (\n      <div className=\"grid\" style={{width: width}}>\n        {rowsArr}\n      \n      </div>\n    )\n  }\n}\n// class for the buttons\nclass Buttons extends React.Component {\n\n\thandleSelect = (evt) => {\n\t\tthis.props.gridSize(evt);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"center\">\n\t\t\t\t<ButtonToolbar>\n\t\t\t\t\t<button className=\"button\" variant=\"light\" onClick={this.props.playButton}>\n\t\t\t\t\t\tPlay\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className=\"button\" variant=\"light\" onClick={this.props.pauseButton}>\n\t\t\t\t\t  Pause\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className=\"button\" variant=\"light\" onClick={this.props.clear}>\n\t\t\t\t\t  Clear\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className=\"button\" variant=\"light\" onClick={this.props.slow}>\n\t\t\t\t\t  Slow\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className=\"button\" variant=\"light\" onClick={this.props.fast}>\n\t\t\t\t\t  Fast\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className=\"button\" variant=\"light\" onClick={this.props.seed}>\n\t\t\t\t\t  Random\n\t\t\t\t\t</button>\n\t\t\t\t\t<DropdownButton\n            class=\"button\"\n\t\t\t\t\t\ttitle=\"Grid Size\"\n\t\t\t\t\t\tid=\"size-menu\"\n            onSelect={this.handleSelect}\n\t\t\t\t\t>\n\t\t\t\t\t\t<DropdownItem eventKey=\"1\">20x10</DropdownItem>\n            <br></br>\n\t\t\t\t\t\t<DropdownItem eventKey=\"2\">50x30</DropdownItem>\n            <br></br>\n\t\t\t\t\t\t<DropdownItem eventKey=\"3\">70x50</DropdownItem>\n\t\t\t\t\t</DropdownButton>\n\t\t\t\t</ButtonToolbar>\n\t\t\t</div>\n\t\t\t)\n\t}\n}\n\n// class for holding everything on the screen\nclass Container extends React.Component {\n    constructor() {\n      super();\n      this.speed = 100;\n      this.rows = 36;\n      this.cols = 42;\n      this.state = {\n        generation: 0,\n        gridFull: Array(this.rows).fill().map(() => Array(this.cols).fill(false))\n      }\n    }\n// double buffering with gridcopy and seed\n    selectBox = (row, col) => {\n      let gridCopy = arrayClone(this.state.gridFull);\n      gridCopy[row][col] = !gridCopy[row][col];\n      this.setState({\n        gridFull: gridCopy\n      })\n    }\n\n    seed = () => {\n      let gridCopy = arrayClone(this.state.gridFull);\n      for (let i = 0; i < this.rows; i ++) {\n        for (let j = 0; j < this.cols; j ++) {\n          if (Math.floor(Math.random() * 4) === 1) {\n            gridCopy[i][j] = true;\n          }\n        }\n      }\n      this.setState({\n        gridFull: gridCopy\n      });\n    }\n// logic for play button\n    playButton = () => {\n      clearInterval(this.intervalId);\n      this.intervalId = setInterval(this.play, this.speed);\n    }\n// logic for pause button\n    pauseButton = () => {\n      clearInterval(this.intervalId);\n    }\n// logic for slow speed\n    slow = () => {\n      this.speed = 1000;\n      this.playButton();\n    }\n// logic for fast speed  \n    fast = () => {\n      this.speed = 100;\n      this.playButton();\n    }\n// logic for clearing grid  \n    clear = () => {\n      var grid = Array(this.rows).fill().map(() => Array(this.cols).fill(false));\n      this.setState({\n        gridFull: grid,\n        generation: 0\n      });\n    }\n// grid variable sizes\n    gridSize = (size) => {\n      switch (size) {\n        case \"1\":\n          this.cols = 26;\n          this.rows = 28;\n          \n        break\n        case \"2\":\n          this.cols = 30;\n          this.rows = 35;\n        break\n        default:\n          this.cols = 48;\n          this.rows = 56;\n      }\n      this.clear();      \n    }\n// logic for the rules of the game of life\n    play = () => {\n      let g = this.state.gridFull;\n      let g2 = arrayClone(this.state.gridFull);\n\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.cols; j++) {\n          let count = 0;\n          if (i > 0) if (g[i - 1][j]) count++;\n          if (i > 0 && j > 0) if (g[i - 1][j - 1]) count++;\n          if (i > 0 && j < this.cols - 1) if (g[i - 1][j + 1]) count++;\n          if (j < this.cols - 1) if (g[i][j + 1]) count++;\n          if (j > 0) if (g[i][j - 1]) count++;\n          if (i < this.rows - 1) if (g[i + 1][j]) count++;\n          if (i < this.rows - 1 && j > 0) if (g[i + 1][j - 1]) count++;\n          if (i < this.rows - 1 && j < this.cols - 1) if (g[i + 1][j + 1]) count++;\n          if (g[i][j] && (count < 2 || count > 3)) g2[i][j] = false;\n          if (!g[i][j] && count === 3) g2[i][j] = true;        \n        }\n      }\n      \n      this.setState({\n        gridFull: g2,\n        generation: this.state.generation + 1\n      });\n    }\n\n    componentDidMount() {\n      this.seed();\n    }\n\n    render() {\n        return (\n            <div>\n                <h1><span >Conways Game of life</span ></h1>\n                <Buttons\n                  playButton={this.playButton}\n                  pauseButton={this.pauseButton}\n                  slow={this.slow}\n                  fast={this.fast}\n                  clear={this.clear}\n                  seed={this.seed}\n                  gridSize={this.gridSize}\n                />\n                <Grid\n                  gridFull={this.state.gridFull}\n                  rows={this.rows}\n                  cols={this.cols}\n                  selectBox={this.selectBox}\n                />\n                <h2>Generations: {this.state.generation}</h2>    \n                <br></br>\n                <h3>Rules of the Game of Life <br></br>\n                  1. Any live cell with two or three live neighbours survives.<br></br>\n                  2. Any dead cell with three live neighbours becomes a live cell. <br></br>\n                  3. All other live cells die in the next generation. Similarly, all other dead cells stay dead.\n                </h3>\n            </div>\n            \n        );\n            \n    }\n}\n\nfunction arrayClone(arr) {\n  return JSON.parse(JSON.stringify(arr));\n}\n\nReactDOM.render(<Container />, document.getElementById('root'));"],"sourceRoot":""}